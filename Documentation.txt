After setting up the maven project, the initial classes and methods were created. 
ScanMalta was chosen as the site to be tested on as it was recommended as an example
and I have also used the site before. Therefore I already had an idea of how the 
website works. 

-Scenario 1
A new account was registered with ScanMalta for the purpose of the assignment.
The 1st Scenario is to test the valid login feature.
First, the login page for the site was loaded into the browser. 
Next the findElement Selenium commands were used to locate were the username and
password are meant to be entered.
After entering them, the sign in button is pressed.
The login was then validated by asserting that the Welcome User page is loaded.
This shows that you are in fact logged in as it says "Hello, [name]".


-Scenario 2
This scenario was tested similarly to the 1st one, only this time the password
passed through was purposely incorrect. 
Now after the sign in button is pressed, rather than the welcome page, the user
is now greeted with a pop up stating "Invalid login or password".
Therefore this test was verified by asserting that the pop up actually shows up
when invalid credentials are entered.


-----------------------------------------------------------------------------------------------
From here on out, the next couple of scenarios all require the user to be logged in.
Therefore it made sense to make use of page objects, so that within the StepDefs class
we can simply just call the methods from the page objects rather than having to 
repeat the same code to log in every time.
This way we save time and effort and just make use of calling the method when it is
required.

Within the StepDefs class, the PageObject sut (for system under test) was created
so that the methods from the PageObject can be used within this class.
Then in the PageObject class, the test code from the StepDefs were placed into 
methods. 
Next, the methods within the StepDefs class were altered so that they simply just 
call the methods from the PageObject class. 

-----------------------------------------------------------------------------------------------

-Scenario 3
This scenario requires the user to be logged in and perform a product search.
The first bit makes use of the getPage and validLogin methods in order to
log the user in and verify that they are logged in. 
These are the same methods used for the previous scenarios.
In order to perform a product search, a method called search was created which
finds the search bar and inputs the string containing the product's name.
It then submits which starts the search.
Next we are required to select the 1st product that comes up from the search.
This is done by creating a list of type WebElement that lists all the products
displayed. 
A WebElement called firstProduct is then made to store the 1st element within the list.
This firstProduct is then selected.
The product details is meant to be displayed, and this is verified by asserting that
the "Product Description" can be seen.


-Scenario 4
This scenario requires the user to be logged in, search for a product and then add it to cart.
The methods from the previous scenarios were used to log in and perform the search.
However in between them, after logging in the user is directed to their cart.
Here it is checked that the cart is currently empty, meaning it has no products added.
At first this was done by asserting that the page contains the text "Shopping Cart is Empty"
This was qiuckly scrapped as later on when an item was added to the cart, it would be saved
to it, meaning that even after the testing ended it would remain in the cart.
It was problematic as whenever a test was run it would see that the cart is not empty 
and just fail and stop there, unless it was manually removed.
Therefore to avoid all this, rather than just making use of the assert, the "Empty Cart" button
was clicked to empty the cart.
This was done within a simple if statement.
Next the product was searched and the first item was selected (using previous methods).
Then the "Add to cart" button was clicked from the details page in order to add the product to the cart. 
Now the cart should at least contain 1 item.
The viewCartAfterAdd method was created in order to hold the amount of items found in the cart.
This works by creating a list cartList of type WebElement which lists all the items in the cart.
The java .size() method is used to calculate the amount present in the list.
The method cartHasOneItem is then used to verify that the cart has indeed 1 product in it. 
This is done by creating an integer item which calls the viewCartAfterAdd method to calculate the 
amount of products in the cart.
This amount is then asserted to be equal to 1.


-Scenario 5
The login and empty cart checked are done using the previous methods.
Multiple products are selected and added to the cart within the 
selectMultipleProductsAndAddToCart method.
In this method a loop is run where for i amount of times (i being not equal to int1, which
is the amount to be added to cart).
First a search is performed for "ssd". 
Then a list of WebElement is used to list all the products displayed.
The ith product is then clicked on and added to cart, ending the iteration.
This is repeated until the required amounts have been added to the cart.
This is all verified within the cartHasMultipleItems.
This method works just like cartHasOneItem but for multiple products.


-Scenario 6
This scenario begins by logging in, emptying the cart and then adding 2 products.
To add 2 products, a method was created which performs 2 different searches and 
adds the 1st item that comes up to the cart.
The removeFirstProduct works by breaking down the view WebElements until the 1st
row of the table holding the items in the cart is found.
First the table is found, then the body within it and then finally the 1st row
within all that. 
From here the remove button is found and clicked to remove the product from the cart.
This is verified the same way scenario 5 was verified.



  Scenario: 6 Removing a product from cart
  Given I am a logged in user on the website "farseersc28@gmail.com" and "Test@123"
  And my shopping cart has 2 products
  When I remove the first product in my cart
  Then my shopping cart should contain 1 item










