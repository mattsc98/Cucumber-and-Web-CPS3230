After setting up the maven project, the initial classes and methods were created. 
ScanMalta was chosen as the site to be tested on as it was recommended as an example
and I have also used the site before. Therefore I already had an idea of how the 
website works. 

-Scenario 1
A new account was registered with ScanMalta for the purpose of the assignment.
The 1st Scenario is to test the valid login feature.
First, the login page for the site was loaded into the browser. 
Next the findElement Selenium commands were used to locate were the username and
password are meant to be entered.
After entering them, the sign in button is pressed.
The login was then validated by asserting that the Welcome User page is loaded.
This shows that you are in fact logged in as it says "Hello, [name]".


-Scenario 2
This scenario was tested similarly to the 1st one, only this time the password
passed through was purposely incorrect. 
Now after the sign in button is pressed, rather than the welcome page, the user
is now greeted with a pop up stating "Invalid login or password".
Therefore this test was verified by asserting that the pop up actually shows up
when invalid credentials are entered.


-----------------------------------------------------------------------------------------------
From here on out, the next couple of scenarios all require the user to be logged in.
Therefore it made sense to make use of page objects, so that within the StepDefs class
we can simply just call the methods from the page objects rather than having to 
repeat the same code to log in every time.
This way we save time and effort and just make use of calling the method when it is
required.

Within the StepDefs class, the PageObject sut (for system under test) was created
so that the methods from the PageObject can be used within this class.
Then in the PageObject class, the test code from the StepDefs were placed into 
methods. 
Next, the methods within the StepDefs class were altered so that they simply just 
call the methods from the PageObject class. 

-----------------------------------------------------------------------------------------------

-Scenario 3
This scenario requires the user to be logged in and perform a product search.
The first bit makes use of the getPage and validLogin methods in order to
log the user in and verify that they are logged in. 
These are the same methods used for the previous scenarios.
In order to perform a product search, a method called search was created which
finds the search bar and inputs the string containing the product's name.
It then submits which starts the search.
Next we are required to select the 1st product that comes up from the search.
This is done by creating a list of type WebElement that lists all the products
displayed. 
A WebElement called firstProduct is then made to store the 1st element within the list.
This firstProduct is then selected.
The product details is meant to be displayed, and this is verified by asserting that
the "Product Description" can be seen.







